// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BCMapBox.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BCMapBox {

  /// <summary>Holder for reflection information generated from BCMapBox.proto</summary>
  public static partial class BCMapBoxReflection {

    #region Descriptor
    /// <summary>File descriptor for BCMapBox.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BCMapBoxReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5CQ01hcEJveC5wcm90bxIIQkNNYXBCb3giIAoPTWFwUmVxdWVzdFRva2Vu",
            "Eg0KBXRva2VuGAEgASgJIigKE01hcFJlcXVlc3REYXRhc2V0SWQSEQoJZGF0",
            "YXNldElkGAEgASgJIigKE01hcFJlcXVlc3RUaWxlc2V0SWQSEQoJdGlsZXNl",
            "dElkGAEgASgJIigKE01hcFJlcXVlc3RGZWF0dXJlSWQSEQoJZmVhdHVyZUlk",
            "GAEgASgJIiQKEU1hcFJlcXVlc3RGZWF0dXJlEg8KB2ZlYXR1cmUYASABKAki",
            "JAoRTWFwUmVxdWVzdEdsb2JlSWQSDwoHZ2xvYmVJZBgBIAEoCSIqChRNYXBS",
            "ZXF1ZXN0R2xvYmVTdHlsZRISCgpnbG9iZVN0eWxlGAEgASgJIhsKCE1hcFJl",
            "cGx5Eg8KB21lc3NhZ2UYASABKAky6gMKBUJDTWFwEj0KClRyYW5zVG9rZW4S",
            "GS5CQ01hcEJveC5NYXBSZXF1ZXN0VG9rZW4aEi5CQ01hcEJveC5NYXBSZXBs",
            "eSIAEkUKDlRyYW5zRGF0YVNldElkEh0uQkNNYXBCb3guTWFwUmVxdWVzdERh",
            "dGFzZXRJZBoSLkJDTWFwQm94Lk1hcFJlcGx5IgASRQoOVHJhbnNUaWxlc2V0",
            "SWQSHS5CQ01hcEJveC5NYXBSZXF1ZXN0VGlsZXNldElkGhIuQkNNYXBCb3gu",
            "TWFwUmVwbHkiABJHCg9UcmFuc0dsb2JlU3R5bGUSHi5CQ01hcEJveC5NYXBS",
            "ZXF1ZXN0R2xvYmVTdHlsZRoSLkJDTWFwQm94Lk1hcFJlcGx5IgASQQoMVHJh",
            "bnNGZWF0dXJlEhsuQkNNYXBCb3guTWFwUmVxdWVzdEZlYXR1cmUaEi5CQ01h",
            "cEJveC5NYXBSZXBseSIAEkEKDFRyYW5zR2xvYmVJZBIbLkJDTWFwQm94Lk1h",
            "cFJlcXVlc3RHbG9iZUlkGhIuQkNNYXBCb3guTWFwUmVwbHkiABJFCg5UcmFu",
            "c0ZlYXR1cmVJZBIdLkJDTWFwQm94Lk1hcFJlcXVlc3RGZWF0dXJlSWQaEi5C",
            "Q01hcEJveC5NYXBSZXBseSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapRequestToken), global::BCMapBox.MapRequestToken.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapRequestDatasetId), global::BCMapBox.MapRequestDatasetId.Parser, new[]{ "DatasetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapRequestTilesetId), global::BCMapBox.MapRequestTilesetId.Parser, new[]{ "TilesetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapRequestFeatureId), global::BCMapBox.MapRequestFeatureId.Parser, new[]{ "FeatureId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapRequestFeature), global::BCMapBox.MapRequestFeature.Parser, new[]{ "Feature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapRequestGlobeId), global::BCMapBox.MapRequestGlobeId.Parser, new[]{ "GlobeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapRequestGlobeStyle), global::BCMapBox.MapRequestGlobeStyle.Parser, new[]{ "GlobeStyle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BCMapBox.MapReply), global::BCMapBox.MapReply.Parser, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MapRequestToken : pb::IMessage<MapRequestToken> {
    private static readonly pb::MessageParser<MapRequestToken> _parser = new pb::MessageParser<MapRequestToken>(() => new MapRequestToken());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequestToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestToken(MapRequestToken other) : this() {
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestToken Clone() {
      return new MapRequestToken(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequestToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequestToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequestToken other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRequestDatasetId : pb::IMessage<MapRequestDatasetId> {
    private static readonly pb::MessageParser<MapRequestDatasetId> _parser = new pb::MessageParser<MapRequestDatasetId>(() => new MapRequestDatasetId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequestDatasetId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestDatasetId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestDatasetId(MapRequestDatasetId other) : this() {
      datasetId_ = other.datasetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestDatasetId Clone() {
      return new MapRequestDatasetId(this);
    }

    /// <summary>Field number for the "datasetId" field.</summary>
    public const int DatasetIdFieldNumber = 1;
    private string datasetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequestDatasetId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequestDatasetId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatasetId != other.DatasetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatasetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatasetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequestDatasetId other) {
      if (other == null) {
        return;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DatasetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRequestTilesetId : pb::IMessage<MapRequestTilesetId> {
    private static readonly pb::MessageParser<MapRequestTilesetId> _parser = new pb::MessageParser<MapRequestTilesetId>(() => new MapRequestTilesetId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequestTilesetId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestTilesetId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestTilesetId(MapRequestTilesetId other) : this() {
      tilesetId_ = other.tilesetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestTilesetId Clone() {
      return new MapRequestTilesetId(this);
    }

    /// <summary>Field number for the "tilesetId" field.</summary>
    public const int TilesetIdFieldNumber = 1;
    private string tilesetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TilesetId {
      get { return tilesetId_; }
      set {
        tilesetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequestTilesetId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequestTilesetId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TilesetId != other.TilesetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TilesetId.Length != 0) hash ^= TilesetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TilesetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TilesetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TilesetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TilesetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequestTilesetId other) {
      if (other == null) {
        return;
      }
      if (other.TilesetId.Length != 0) {
        TilesetId = other.TilesetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TilesetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改feature,删除featureId
  /// </summary>
  public sealed partial class MapRequestFeatureId : pb::IMessage<MapRequestFeatureId> {
    private static readonly pb::MessageParser<MapRequestFeatureId> _parser = new pb::MessageParser<MapRequestFeatureId>(() => new MapRequestFeatureId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequestFeatureId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestFeatureId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestFeatureId(MapRequestFeatureId other) : this() {
      featureId_ = other.featureId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestFeatureId Clone() {
      return new MapRequestFeatureId(this);
    }

    /// <summary>Field number for the "featureId" field.</summary>
    public const int FeatureIdFieldNumber = 1;
    private string featureId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureId {
      get { return featureId_; }
      set {
        featureId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequestFeatureId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequestFeatureId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatureId != other.FeatureId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeatureId.Length != 0) hash ^= FeatureId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeatureId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FeatureId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeatureId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequestFeatureId other) {
      if (other == null) {
        return;
      }
      if (other.FeatureId.Length != 0) {
        FeatureId = other.FeatureId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FeatureId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRequestFeature : pb::IMessage<MapRequestFeature> {
    private static readonly pb::MessageParser<MapRequestFeature> _parser = new pb::MessageParser<MapRequestFeature>(() => new MapRequestFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequestFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestFeature(MapRequestFeature other) : this() {
      feature_ = other.feature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestFeature Clone() {
      return new MapRequestFeature(this);
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 1;
    private string feature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Feature {
      get { return feature_; }
      set {
        feature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequestFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequestFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Feature != other.Feature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Feature.Length != 0) hash ^= Feature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Feature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Feature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Feature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Feature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequestFeature other) {
      if (other == null) {
        return;
      }
      if (other.Feature.Length != 0) {
        Feature = other.Feature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Feature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRequestGlobeId : pb::IMessage<MapRequestGlobeId> {
    private static readonly pb::MessageParser<MapRequestGlobeId> _parser = new pb::MessageParser<MapRequestGlobeId>(() => new MapRequestGlobeId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequestGlobeId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestGlobeId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestGlobeId(MapRequestGlobeId other) : this() {
      globeId_ = other.globeId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestGlobeId Clone() {
      return new MapRequestGlobeId(this);
    }

    /// <summary>Field number for the "globeId" field.</summary>
    public const int GlobeIdFieldNumber = 1;
    private string globeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlobeId {
      get { return globeId_; }
      set {
        globeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequestGlobeId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequestGlobeId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GlobeId != other.GlobeId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GlobeId.Length != 0) hash ^= GlobeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GlobeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GlobeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GlobeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GlobeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequestGlobeId other) {
      if (other == null) {
        return;
      }
      if (other.GlobeId.Length != 0) {
        GlobeId = other.GlobeId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GlobeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRequestGlobeStyle : pb::IMessage<MapRequestGlobeStyle> {
    private static readonly pb::MessageParser<MapRequestGlobeStyle> _parser = new pb::MessageParser<MapRequestGlobeStyle>(() => new MapRequestGlobeStyle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequestGlobeStyle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestGlobeStyle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestGlobeStyle(MapRequestGlobeStyle other) : this() {
      globeStyle_ = other.globeStyle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequestGlobeStyle Clone() {
      return new MapRequestGlobeStyle(this);
    }

    /// <summary>Field number for the "globeStyle" field.</summary>
    public const int GlobeStyleFieldNumber = 1;
    private string globeStyle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlobeStyle {
      get { return globeStyle_; }
      set {
        globeStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequestGlobeStyle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequestGlobeStyle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GlobeStyle != other.GlobeStyle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GlobeStyle.Length != 0) hash ^= GlobeStyle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GlobeStyle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GlobeStyle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GlobeStyle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GlobeStyle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequestGlobeStyle other) {
      if (other == null) {
        return;
      }
      if (other.GlobeStyle.Length != 0) {
        GlobeStyle = other.GlobeStyle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GlobeStyle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapReply : pb::IMessage<MapReply> {
    private static readonly pb::MessageParser<MapReply> _parser = new pb::MessageParser<MapReply>(() => new MapReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BCMapBox.BCMapBoxReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReply(MapReply other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReply Clone() {
      return new MapReply(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapReply other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
